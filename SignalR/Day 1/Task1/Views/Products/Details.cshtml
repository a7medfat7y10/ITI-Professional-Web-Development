@model app.Models.Product

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>
<div class="row">
<div class="col-6">

    <div>
        <h4>Product</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Name)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Name)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Price)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Price)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Quantity)
            </dt>
            <dd class="col-sm-10" id="quantity">
                @Model.Quantity
            </dd>
        </dl>
    </div>
    <button class="btn btn-dark" id="btnBuy">Buy</button>
    <div class="row g-3 align-items-center">
        <textarea class="form-control" id="com" rows="5" placeholder="Write Your Comments"></textarea>
        <button id="btnPost" class="btn btn-outline-dark">Comment</button>
    </div>
    <div>
        <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>
</div>
<div class="col-6">
    <h1>Comments</h1>
    <ol id="comments" class=" overflow-auto">
    </ol>
</div>
</div>

@section Scripts{

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js" integrity="sha512-k8WL9L2jG8KyG3pCJA4mHMdg2YSoWrdB5QNqLIhROv69udwp87WvbqzbsiAL65wy7T9jHU7rAoePr1ToPBc0Lw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>

        const connection = new signalR.HubConnectionBuilder().withUrl("/appHub").build();

        //Disable the send button until connection is established.
        document.getElementById("btnPost").disabled = true;
        document.getElementById("btnBuy").disabled = true;
        let i = 1;
        connection.on("ReciveComment", function (prodId, comment) {
            if (prodId == "@Model.Id") {
                const li = document.createElement("li");
                document.getElementById("comments").appendChild(li);
                li.textContent = `${comment}`;
                 document.getElementById("com").value="";

            }
        });
        connection.on("UpdateQuantity", function (prodId, q) {
            if (prodId == "@Model.Id") {
                const quantity = document.getElementById("quantity");
                quantity.textContent = q;
            }
        });
        connection.start().then(function () {
            console.log("Connected SuccessFully");
            document.getElementById("btnPost").disabled = false;
            document.getElementById("btnBuy").disabled = false;

        }).catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("btnBuy").addEventListener("click", function (event) {
            const prodid = parseInt("@Model.Id")
            connection.invoke("BuyProd", prodid).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });
        document.getElementById("btnPost").addEventListener("click", function (event) {
            event.preventDefault();
            const com = document.getElementById("com");
            const prodid = parseInt("@Model.Id")
            connection.invoke("PostComment", prodid, com.value).catch(function (err) {
                return console.error(err.toString());
            });
        });
    </script>
}